
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  user_id: 'user_id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  password: 'password',
  role: 'role',
  temporary_password: 'temporary_password'
};

exports.Prisma.CarScalarFieldEnum = {
  licence_plate: 'licence_plate',
  reference: 'reference',
  brand: 'brand',
  model: 'model',
  year: 'year',
  mileage: 'mileage',
  price: 'price',
  color: 'color',
  transmission: 'transmission',
  fuel_type: 'fuel_type',
  status: 'status',
  description: 'description',
  images: 'images',
  added_by: 'added_by'
};

exports.Prisma.ReviewScalarFieldEnum = {
  review_id: 'review_id',
  rating: 'rating',
  title: 'title',
  author: 'author',
  content: 'content',
  status: 'status'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  schedule_id: 'schedule_id',
  day: 'day',
  opening_time: 'opening_time',
  closing_time: 'closing_time',
  is_closed: 'is_closed',
  added_by: 'added_by'
};

exports.Prisma.CarReferenceScalarFieldEnum = {
  reference_id: 'reference_id',
  brand: 'brand',
  model: 'model',
  year: 'year',
  counter: 'counter'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ReviewStatus = exports.$Enums.ReviewStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.CarStatus = exports.$Enums.CarStatus = {
  AVAILABLE: 'AVAILABLE',
  SOLD: 'SOLD',
  RESERVED: 'RESERVED'
};

exports.FuelType = exports.$Enums.FuelType = {
  GASOLINE: 'GASOLINE',
  DIESEL: 'DIESEL',
  ELECTRIC: 'ELECTRIC',
  HYBRID: 'HYBRID'
};

exports.Transmission = exports.$Enums.Transmission = {
  MANUAL: 'MANUAL',
  AUTOMATIC: 'AUTOMATIC'
};

exports.Role = exports.$Enums.Role = {
  EMPLOYEE: 'EMPLOYEE',
  ADMIN: 'ADMIN'
};

exports.Prisma.ModelName = {
  User: 'User',
  Car: 'Car',
  Review: 'Review',
  Schedule: 'Schedule',
  CarReference: 'CarReference'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\CODE\\PROJETS\\Garage_Vincent_Parrot_Reload\\Backend\\src\\infrastructure\\db\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\CODE\\PROJETS\\Garage_Vincent_Parrot_Reload\\Backend\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../../../.env"
  },
  "relativePath": "../../../../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/infrastructure/db/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  user_id            String     @id @default(nanoid())\n  first_name         String     @db.VarChar(100)\n  last_name          String     @db.VarChar(100)\n  email              String     @unique\n  password           String\n  role               Role\n  temporary_password Boolean    @default(true)\n  cars               Car[]      @relation(name: \"UserCars\")\n  schedules          Schedule[] @relation(name: \"UserSchedules\")\n}\n\nmodel Car {\n  licence_plate String       @id @db.VarChar(15)\n  reference     String       @db.VarChar(100)\n  brand         String       @db.VarChar(100)\n  model         String       @db.VarChar(100)\n  year          Int\n  mileage       Int\n  price         Float\n  color         String       @db.VarChar(50)\n  transmission  Transmission\n  fuel_type     FuelType\n  status        CarStatus    @default(AVAILABLE)\n  description   String?      @db.Text\n  images        String[]     @db.Text\n  added_by      String\n  user          User         @relation(fields: [added_by], references: [user_id], name: \"UserCars\")\n}\n\nmodel Review {\n  review_id Int          @id @default(autoincrement())\n  rating    Int\n  title     String       @db.VarChar(255)\n  author    String       @db.VarChar(255)\n  content   String       @db.Text\n  status    ReviewStatus @default(PENDING)\n}\n\nmodel Schedule {\n  schedule_id  Int     @id @default(autoincrement())\n  day          String  @db.VarChar(50)\n  opening_time String  @db.VarChar(10)\n  closing_time String  @db.VarChar(10)\n  is_closed    Boolean @default(false)\n  added_by     String\n  user         User    @relation(fields: [added_by], references: [user_id], name: \"UserSchedules\")\n}\n\nmodel CarReference {\n  reference_id Int    @id @default(autoincrement())\n  brand        String @db.VarChar(100)\n  model        String @db.VarChar(100)\n  year         Int\n  counter      Int    @default(0)\n}\n\nenum ReviewStatus {\n  PENDING\n  APPROVED\n  REJECTED\n}\n\nenum CarStatus {\n  AVAILABLE\n  SOLD\n  RESERVED\n}\n\nenum FuelType {\n  GASOLINE\n  DIESEL\n  ELECTRIC\n  HYBRID\n}\n\nenum Transmission {\n  MANUAL\n  AUTOMATIC\n}\n\nenum Role {\n  EMPLOYEE\n  ADMIN\n}\n",
  "inlineSchemaHash": "5aedbad7f038b0c675a6db20260f102a85b610871684fe5f84c095f0e182215f",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"first_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"last_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"temporary_password\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"cars\",\"kind\":\"object\",\"type\":\"Car\",\"relationName\":\"UserCars\"},{\"name\":\"schedules\",\"kind\":\"object\",\"type\":\"Schedule\",\"relationName\":\"UserSchedules\"}],\"dbName\":null},\"Car\":{\"fields\":[{\"name\":\"licence_plate\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reference\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"brand\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"model\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"year\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"mileage\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transmission\",\"kind\":\"enum\",\"type\":\"Transmission\"},{\"name\":\"fuel_type\",\"kind\":\"enum\",\"type\":\"FuelType\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"CarStatus\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"images\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"added_by\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserCars\"}],\"dbName\":null},\"Review\":{\"fields\":[{\"name\":\"review_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"author\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ReviewStatus\"}],\"dbName\":null},\"Schedule\":{\"fields\":[{\"name\":\"schedule_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"day\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"opening_time\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"closing_time\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"is_closed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"added_by\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserSchedules\"}],\"dbName\":null},\"CarReference\":{\"fields\":[{\"name\":\"reference_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"brand\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"model\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"year\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"counter\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

